unit UF_TestAriadni;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Spin, StdCtrls, Buttons, ExtCtrls, Math;

type
  TEcrTestAriadni = class(TForm)
    edNomDll: TLabeledEdit;
    edNomFct2Int: TLabeledEdit;
    btnChargeDll: TButton;
    btnDechargeDll: TButton;
    lbX: TLabel;
    edX: TSpinEdit;
    lbY: TLabel;
    edY: TSpinEdit;
    lbEtatDll: TLabel;
    btnAppelFct2Int: TButton;
    lbRes2Int: TLabel;
    edNomSetGen: TLabeledEdit;
    edEchX: TSpinEdit;
    edEchY: TSpinEdit;
    lbResSetGen: TLabel;
    btnAppelSetGen: TButton;
    Bevel1: TBevel;
    Bevel2: TBevel;
    lbFct2Int: TLabel;
    lbSetGen: TLabel;
    lbH: TLabel;
    lbW: TLabel;
    edAngle: TSpinEdit;
    lbAngle: TLabel;
    cbInitAuto: TCheckBox;
    edNomInit: TLabeledEdit;
    btnAppelInit: TButton;
    lbFctInit: TLabel;
    lbResInit: TLabel;
    Bevel3: TBevel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    edNomSetLineScan: TLabeledEdit;
    lbSetLineScan: TLabel;
    lbXDeb: TLabel;
    edLS_Xdeb: TSpinEdit;
    edLS_Ydeb: TSpinEdit;
    lbYDeb: TLabel;
    lbAngleLS: TLabel;
    edLS_Angle: TSpinEdit;
    lbResLineScan: TLabel;
    btnAppelSetLineScan: TButton;
    edLS_Points: TSpinEdit;
    lbPoints: TLabel;
    Label5: TLabel;
    edLS_Len: TSpinEdit;
    Label4: TLabel;
    Label6: TLabel;
    cbBDU: TCheckBox;
    cbBDL: TCheckBox;
    cbIDU: TCheckBox;
    cbCS: TCheckBox;
    Label7: TLabel;
    edLS_SpinFreq: TSpinEdit;
    Label8: TLabel;
    edLS_Tem: TSpinEdit;
    Bevel4: TBevel;
    Label9: TLabel;
    logbox: TListBox;
    edNomRelease: TLabeledEdit;
    btnAppelRelease: TButton;
    edNomGetStat: TLabeledEdit;
    lbGetStat: TLabel;
    btnAppelGetStat: TButton;
    lbResGetStat: TLabel;
    Bevel5: TBevel;
    edNotifRetVal: TLabeledEdit;
    cbShowGui: TCheckBox;
    btnShowOutline: TButton;
    Button1: TButton;
    procedure btnChargeDllClick(Sender: TObject);
    procedure btnDechargeDllClick(Sender: TObject);
    procedure btnAppelFct2IntClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnAppelSetGenClick(Sender: TObject);
    procedure edAngleChange(Sender: TObject);
    procedure btnAppelInitClick(Sender: TObject);
    procedure edNomFct2IntChange(Sender: TObject);
    procedure edNomInitChange(Sender: TObject);
    procedure edNomSetGenChange(Sender: TObject);
    procedure btnAppelSetLineScanClick(Sender: TObject);
    procedure edNomSetLineScanChange(Sender: TObject);
    procedure btnAppelReleaseClick(Sender: TObject);
    procedure edNomGetStatChange(Sender: TObject);
    procedure btnAppelGetStatClick(Sender: TObject);
    procedure edNotifRetValChange(Sender: TObject);
    procedure cbShowGuiClick(Sender: TObject);
    procedure btnShowOutlineClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private { Déclarations privées }
    HDll : THandle;
    InitOk : Boolean;
  public  { Déclarations publiques }
  end;

var
  EcrTestAriadni: TEcrTestAriadni;

implementation

uses UF_Target;

{$R *.dfm}

procedure TEcrTestAriadni.FormDestroy(Sender: TObject);
begin
  If InitOk then
  begin
    btnAppelReleaseClick(Nil);
    Sleep(100);
  End;

  If HDll <> 0 then
    FreeLibrary(HDll);
end;

procedure TEcrTestAriadni.btnChargeDllClick(Sender: TObject);
Var DllOk : Boolean;
  I : Integer;
begin
  HDll := LoadLibrary(PChar(edNomDll.Text));
  DllOk := HDll <> 0;

  If DllOk then
    lbEtatDll.Caption := 'DLL state : loaded'
  else
  Begin
    I := GetLastError;
    lbEtatDll.Caption := 'DLL state : failed to load. GetLastError()='+IntToHex(I,8);
  End;

  btnChargeDll.Enabled := not DllOk;
  btnDechargeDll.Enabled := DllOk;

  btnAppelInit.Enabled := DllOk and (edNomInit.Text <> '');
  btnAppelRelease.Enabled := DllOk and (edNomRelease.Text <> '');
  btnAppelFct2Int.Enabled := DllOk and (edNomFct2Int.Text <> '');
  btnAppelSetGen.Enabled := DllOk and (edNomSetGen.Text <> '');
  btnAppelSetLineScan.Enabled := DllOk and (edNomSetLineScan.Text <> '');
  btnAppelGetStat.Enabled := (HDll <> 0) and (edNomGetStat.Text <> '');

  If DllOk and cbInitAuto.Checked then
    btnAppelInitClick(Nil);
end;

procedure TEcrTestAriadni.btnDechargeDllClick(Sender: TObject);
begin
  If HDll = 0 then
  Begin
    lbEtatDll.Caption := 'DLL state : not loaded';
    Exit;
  End;

  If FreeLibrary(HDll) then
  Begin
    If @FuncRelease = Nil then
    Begin
      lbResInit.Caption := 'function '+edNomRelease.Text+' not found or not loaded';
      Exit;
    End;
    Res := FuncRelease();
    lbResInit.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
    InitOk := not (Res <> 0);
    HDll := 0;
    lbEtatDll.Caption := 'DLL state : unloaded';
    btnChargeDll.Enabled := True;
    btnDechargeDll.Enabled := False;

    btnAppelInit.Enabled := False;
    btnAppelRelease.Enabled := False;
    btnAppelFct2Int.Enabled := False;
    btnAppelSetGen.Enabled := False;
    btnAppelSetLineScan.Enabled := False;
    btnAppelGetStat.Enabled := False;
  End
  else
  Begin
    lbEtatDll.Caption := 'DLL state : fail to unload';
  End;
end;

//------------------------------------------------------------------------------

procedure TEcrTestAriadni.edNomInitChange(Sender: TObject);
begin
  lbFctInit.Caption := 'int stdcall '+edNomInit.Text+'(longbool State);';
  btnAppelInit.Caption := 'Call '+edNomInit.Text;

  btnAppelInit.Enabled := (HDll <> 0) and (edNomInit.Text <> '');
end;

Var NotifRetVal:Integer = 0;


procedure TEcrTestAriadni.edNotifRetValChange(Sender: TObject);
Var Err : integer;
begin
  Val(edNotifRetVal.Text, NotifRetVal, Err);
  If Err <> 0 then
  Begin
    edNotifRetVal.Text := '0';
    edNotifRetVal.color := clRed;
  End
  else
    edNotifRetVal.color := clWindow;
end;

function AriadniCallBack(Num:integer; Value:Double):Integer; stdcall;
Begin
  EcrTestAriadni.Logbox.Items.Add(TimeToStr(Now)+' :  Status(int)='+IntToStr(Num)+'  SettingValue(double)='+FloatToStr(Value));
  Result := NotifRetVal;
End;

procedure TEcrTestAriadni.btnAppelInitClick(Sender: TObject);
Type
  TCallBackFunc = function(Num:integer; Value:Double):Integer; stdcall;
Var
  Res : Integer;
  FuncInit : function(Callback:TCallBackFunc):Integer; StdCall;
begin
  If HDll = 0 then
  Begin
    lbResInit.Caption := 'DLL not loaded';
    Exit;
  End;
{
  If InitOk then
  Begin
    lbEtatDll.Caption := 'DLL already initialized';
    Exit;
  End;
}
  @FuncInit := GetProcAddress(HDll, PChar(edNomInit.Text));
  If @FuncInit = Nil then
  Begin
    lbResInit.Caption := 'function '+edNomInit.Text+' not found or not loaded';
    Exit;
  End;
  Res := FuncInit(AriadniCallBack);
//  Res := FuncInit(nil);

  lbResInit.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);

  InitOk := (Res <> 0);
end;

procedure TEcrTestAriadni.btnAppelReleaseClick(Sender: TObject);
Var
  Res : Integer;
  FuncRelease : function():Integer; StdCall;
begin
  If HDll = 0 then
  Begin
    lbResInit.Caption := 'DLL not loaded';
    Exit;
  End;
{
  If not InitOk then
  Begin
    lbEtatDll.Caption := 'DLL already released';
    Exit;
  End;
}
  @FuncRelease := GetProcAddress(HDll, PChar(edNomRelease.Text));
  If @FuncRelease = Nil then
  Begin
    lbResInit.Caption := 'function '+edNomRelease.Text+' not found or not loaded';
    Exit;
  End;
  Res := FuncRelease();
  lbResInit.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
  InitOk := not (Res <> 0);
end;

procedure TEcrTestAriadni.cbShowGuiClick(Sender: TObject);
Var
  Res : Integer;
  FuncShowGui : function(Statut:Boolean):Integer; StdCall;
begin
  If HDll = 0 then
  Begin
    lbResInit.Caption := 'DLL not loaded';
    Exit;
  End;

  @FuncShowGui := GetProcAddress(HDll, 'ShowGui');
  If @FuncShowGui = Nil then
  Begin
    lbResInit.Caption := 'function '+edNomRelease.Text+' not found or not loaded';
    Exit;
  End;
  Res := FuncShowGui(cbShowGui.Checked);
  lbResInit.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
end;


//------------------------------------------------------------------------------

procedure TEcrTestAriadni.edNomFct2IntChange(Sender: TObject);
begin
  lbFct2Int.Caption := 'int stdcall '+edNomFct2Int.Text+'(int X, int Y);';
  BtnAppelFct2Int.Caption := 'Call '+edNomFct2Int.Text;

  BtnAppelFct2Int.Enabled := (HDll <> 0) and (edNomFct2Int.Text <> '');
end;


procedure TEcrTestAriadni.btnAppelFct2IntClick(Sender: TObject);
Var
  Res : Integer;
  FuncXY : function(X,Y:Double):Integer; StdCall;
begin
  If HDll = 0 then
  Begin
    lbRes2Int.Caption := 'DLL not loaded';
    Exit;
  End;

  @FuncXY := GetProcAddress(HDll, PChar(edNomFct2Int.Text));
  If @FuncXY = Nil then
  Begin
    lbRes2Int.Caption := 'function '+edNomFct2Int.Text+' not found or not loaded';
    Exit;
  End;
  Res := FuncXY(edX.Value, edY.Value);
  lbRes2Int.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
end;

// Fonction exportée
Function MoveBeam(X,Y:Integer):Integer; StdCall;
Begin
  ShowMessage('MoveBeam('+IntToStr(X)+', '+intToStr(Y)+') called.');
  Result := (X and $FFFF) shl 16 or (Y and $FFFF);
End;

//------------------------------------------------------------------------------

Type
  TTabGen = Array[0..479] of Double;
  TTablesXY = packed record
    X, Y : TTabGen;
  End;

Var
  EchX, EchY : Extended;
  CosRot, SinRot : Extended;

Procedure CreeCible(VAR Table:TTablesXY);
Var
  I : Integer;
  N : Integer;

   Procedure MetPoint(X,Y:Double);
   Begin
     Table.X[N] := X*CosRot-Y*SinRot;
     Table.Y[N] := X*SinRot+Y*CosRot;
     Inc(N);
   End;
Begin
  FillChar(Table, SizeOf(Table), 0);
  N := 0;
  // 4 cotés de 110 points + 2 branche de flèche en 40 pts, soit 20 pts par branche
  //Bord bas
  For I := 0 to 109 do // De coin BG à coin BD
    MetPoint( (-1 + 2*I/110)*EchX, -EchY);

  //Bord droit
  For I := 0 to 109 do // De coin BD à coin HD
    MetPoint( EchX, (-1 + 2*I/110)*EchY);

  //Bord haut avec flèche
  For I := 0 to 94 do  // De coin HD à pointe flèche
    MetPoint( (1 - 2*I/110)*EchX, EchY);

  For I := 1 to 20 do  // De pointe flèche à extrémité fleche haute
    MetPoint((-2/32*I/20 -23/32)*EchX, (2/64*I/20 + 1)*EchY);

  For I := 20 downto 1 do  // De extrémité fleche basse à pointe flèche
    MetPoint((-2/32*I/20 -23/32)*EchX, (-2/64*I/20 + 1)*EchY);

  For I := 95 to 109 do // De pointe flèche +1 à coin HG
    MetPoint( (1 - 2*I/110)*EchX, EchY);

  //Bord gauche
  For I := 0 to 109 do //Ligne de HG à BG
    MetPoint( -EchX, (1 - 2*I/110)*EchY);
End;

(*
Procedure CreeCible(VAR Table:TTablesXY);
Var
  Largeur,  Hauteur : Double;
  DemiHaut, DemiLarg : Double;

  dL : Double;
  LimiteX, LimiteY : Double;
  X,Y : Double;

  N : Integer;

   Procedure MetPoint(X,Y:Double);
   Begin
     Assert (N < NbrePtsMire, 'Erreur Nbre Pts dans TDeviaP2000.InitTableZone');
     Table.X[N] := X*CosRot-Y*SinRot;
     Table.Y[N] := X*SinRot+Y*CosRot;
     Inc(N);
   End;
Begin
{$IFDEF AfficheLog}
  Log('Enter InitTableZone');
{$ENDIF}
  Largeur := LargCarte * StepX;
  Hauteur := HautCarte * StepY;
  DemiLarg := Largeur/2;
  DemiHaut := Hauteur/2;

  //Longueur à parcourir dans laquelle il faudra répartir les 512 pts
  // 2*largeur + 2* hauteur + flèche = Largeur*(3*2/32)
  dL := (Largeur*2.1875 + Hauteur*2) / NbrePtsMire;
//  NLarg := Round(512 * LargCarte / L); //Nbre pts à placer sur largeur
//  NHaut := Round(512 * HautCarte / L); //Nbre Pts à placer sur hauteur

  //Point de départ en haut à gauche
  X := -DemiLarg;
  Y := -DemiHaut;
  N := 0;
  //Horizontale jusqu'à pointe de la flèche
  LimiteX := -DemiLarg + (Largeur*9)/32;
  Repeat
    MetPoint(X, Y);
    X := X + dL;
  until X >= LimiteX;

  //Branche haute de la flèche
  LimiteX := -DemiLarg + (Largeur*7)/32;
  Repeat
    MetPoint(X, Y);
    X := X - dL;
    Y := Y - dl*0.7;
  until X <= LimiteX;

  //Branche verticale de la flèche
  LimiteY := -Hauteur + Y;
  Repeat
    MetPoint(X, Y);
    Y := Y + dl*0.7;
  until Y >= LimiteY;

  //Branche basse de la flèche
  LimiteX := -DemiLarg + Round((Largeur*9)/32);
  Repeat
    MetPoint(X, Y);
    X := X + dL;
    Y := Y + dl*0.7;
  until X >= LimiteX;

  //Horizontale de la pointe de la flèche jusqu'au bord droit
  Y := -DemiHaut; //Pour rattrapper cumul erreur
  X := X + dL; //Ce point est déjà tracé
  Repeat
    MetPoint(X, Y);
    X := X + dL;
  until X >= DemiLarg;
  Y := Y + (X-DemiLarg); //Reporte dépassement sur Y
  X := DemiLarg;

  //Bord droit jusqu'en bas
  Repeat
    MetPoint(X, Y);
    Y := Y + dl;
  until Y >= DemiHaut;
  X := DemiLarg-(Y-DemiHaut); //Reporte dépassement sur X
  Y := DemiHaut;

  //Bord bas jusqu'à limite gauche
  dL := (Largeur+Hauteur)/(NbrePtsMire-N); //Ajuste nbre de pts restant
  Repeat
    MetPoint(X, Y);
    X := X - dL;
  until X <= -DemiLarg;
  Y := Y + (X+DemiLarg); //Reporte dépassement sur Y
  X := -DemiLarg;

  //Bord gauche jusqu'en haut
  dL := Hauteur/(NbrePtsMire-N); //Ajuste nbre de pts restant
  Repeat
    MetPoint(X, Y);
    Y := Y - dl;
  until Y <= -DemiHaut;

  Assert (N = NbrePtsMire, 'Erreur N<>NbrePtsMire ('+IntToStr(N)+')');

  AriSetScanOutline([BeamDeflectUp], TableGen);
  Result := True;
End;
*)

procedure TEcrTestAriadni.edNomSetGenChange(Sender: TObject);
begin
  btnAppelSetGen.Caption := 'Call '+edNomSetGen.Text;
  lbSetGen.Caption := 'int stdcall '+edNomSetGen.Text+'(FloatPoint[480]);';

  btnAppelSetGen.Enabled := (HDll <> 0) and (edNomSetGen.Text <> '');
end;

procedure TEcrTestAriadni.btnAppelSetGenClick(Sender: TObject);
Var
  Res : Integer;

  TableGen : TTablesXY;
  FuncSetGen : function(Const Table:TTablesXY):Integer; StdCall;
begin
  If HDll = 0 then
  Begin
    lbResSetGen.Caption := 'DLL not loaded';
    Exit;
  End;

  @FuncSetGen := GetProcAddress(HDll, PChar(edNomSetGen.Text));
  If @FuncSetGen = Nil then
  Begin
    lbResSetGen.Caption := 'function '+edNomSetGen.Text+' not found or not loaded';
    Exit;
  End;

  //Construit la table de 480 points
  EchX := edEchX.Value / 100;
  EchY := edEchY.Value / 100;
  SinCos(edAngle.Value*PI/180, SinRot, CosRot);

  CreeCible(TableGen);

  //Appelle la fonction
  Res := FuncSetGen(TableGen);
  lbResSetGen.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
end;

procedure TEcrTestAriadni.edAngleChange(Sender: TObject);
begin
  If edAngle.Text='' then Exit; //transitoire en cas de copier-coller

  If edAngle.Value = -1 then
    edAngle.Value := 359;
  If edAngle.Value = 360 then
    edAngle.Value := 0;
end;


// Fonction exportée
Function SetGenerator(Const Table:TTablesXY):Integer;
Var
  XM, YM : Integer;
  XC, YC : Integer;
  C : TCanvas;
  I : Integer;
  X,Y : Integer;
  Clip : Integer;
begin
  If EcrTarget = Nil then
    EcrTarget := TEcrTarget.Create(Application);
  EcrTarget.Show;

  XM := EcrTarget.ClientWidth;
  YM := EcrTarget.ClientHeight;
  XC := XM div 2;
  YC := YM div 2;

  C := EcrTarget.Canvas;

  C.Brush.Color := clBlack;
  C.FillRect(Rect(0,0, EcrTarget.ClientWidth, EcrTarget.ClientHeight));

  C.Pen.Color := clWhite;

  Result := 0;
  For I := Low(Table.X) to High(Table.X) do
  Begin
    Clip := 0;
    X := XC + Round(Table.X[I]*XC);
    If X < 0 then
    Begin
      X := 0;
      Clip := 1;
    End
    else If X >= XM then
    Begin
      X := XM;
      Clip := 1;
    End;

    Y := YC + Round(Table.Y[I]*YC);
    If Y < 0 then
    Begin
      Y := 0;
      Clip := 1;
    End
    else If Y >= YM then
    Begin
      Y := YM;
      Clip := 1;
    End;
    Inc(Result, Clip);

    C.Pixels[X, Y] := clWhite;
  End;
end;

Type
  TProcShowHide = Function(Etat:Integer):Integer; StdCall;

procedure TEcrTestAriadni.btnShowOutlineClick(Sender: TObject);
Var ProcShowHide : TProcShowHide;
    Res : Integer;
begin
  If HDll = 0 then
  Begin
    lbResSetGen.Caption := 'DLL not loaded';
    Exit;
  End;

  @ProcShowHide := GetProcAddress(HDll, 'ShowScanOutline');
  If @ProcShowHide = Nil then
  Begin
    lbResSetGen.Caption := 'function ShowScanOutline not found or not loaded';
    Exit;
  End;
  Res := ProcShowHide(1);
  lbResSetGen.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
end;

procedure TEcrTestAriadni.Button1Click(Sender: TObject);
Var ProcShowHide : TProcShowHide;
    Res : Integer;
begin
  If HDll = 0 then
  Begin
    lbResSetGen.Caption := 'DLL not loaded';
    Exit;
  End;

  @ProcShowHide := GetProcAddress(HDll, 'ShowScanOutline');
  If @ProcShowHide = Nil then
  Begin
    lbResSetGen.Caption := 'function ShowScanOutline not found or not loaded';
    Exit;
  End;
  Res := ProcShowHide(0);
  lbResSetGen.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
end;


//------------------------------------------------------------------------------

procedure TEcrTestAriadni.edNomSetLineScanChange(Sender: TObject);
begin
  btnAppelSetLineScan.Caption := 'Call '+edNomSetLineScan.Text;
  lbSetLineScan.Caption := 'int stdcall '+edNomSetLineScan.Text+'(';

  btnAppelSetLineScan.Enabled := (HDll <> 0) and (edNomSetLineScan.Text <> '');
end;

Type
  TDestChannels = set of
  ( BeamDeflectUp,  // value $01
    BeamDeflectLo,  // value $02
    ImageDeflectUp, // value $04
    CameraShutter   // value $08
  );

  TScanData = packed record
    BDUX : double;
    BDUY : double;
    BDLX : double;
    BDLY : double;
    IDX  : double;
    IDY  : double;
    Channel9 : double;
    Shutter  : double;
    Time : Integer;
  End;

procedure TEcrTestAriadni.btnAppelSetLineScanClick(Sender: TObject);
Var
  FuncSetLineScan : function(Channels:TDestChannels; EventCount:Integer; Const Data:TScanData):Integer; StdCall;

  Channels : TDestChannels;
  Table : Array of TScanData;
  I : Integer;
  X0, Y0 : Double;
  LineLen : Double;
  NbrePoints : Integer;
  CosA, SinA:Extended;

  TSpin : Double;
  TTem  : Integer;

  X,Y : Double;
  NumPt : Integer;
  T : Integer;

  Res : Integer;
begin
  If HDll = 0 then
  Begin
    lbResLineScan.Caption := 'DLL not loaded';
    Exit;
  End;

  @FuncSetLineScan := GetProcAddress(HDll, PChar(edNomSetLineScan.Text));
  If @FuncSetLineScan = Nil then
  Begin
    lbResLineScan.Caption := 'function '+edNomSetLineScan.Text+' not found or not loaded';
    Exit;
  End;

  //Prépare channels
  Channels := [];
  If cbBDU.checked then Include(Channels, BeamDeflectUp);
  If cbBDL.checked then Include(Channels, BeamDeflectLo);
  If cbIDU.checked then Include(Channels, ImageDeflectUp);
  If cbCS.checked  then Include(Channels, CameraShutter);

  If Channels = [] then
  Begin
    lbResLineScan.Caption := 'Not any data selected to send !';
    Exit;
  End;

  //Construit la table de points
  X0 := edLS_Xdeb.Value/100;
  Y0 := edLS_Ydeb.Value/100;
  LineLen := edLS_Len.Value/100;
  NbrePoints := edLS_Points.Value;
  SinCos(edLS_Angle.Value*PI/180, SinA, CosA);

  TSpin := 1e6 / edLS_SpinFreq.Value;
  TTem  := edLS_Tem.Value;

  If CameraShutter in Channels
    then SetLength(Table, NbrePoints * 2)
    else SetLength(Table, NbrePoints);

  NumPt := 0;
  T := 0;
  For I := 0 to NbrePoints-1 do
  Begin
    X := X0 + LineLen*CosA * I/NbrePoints;
    Y := Y0 + LineLen*SinA * I/NbrePoints;

    With Table[NumPt] do
    Begin
      If BeamDeflectUp in Channels then
      Begin
        BDUX := X;
        BDUY := Y;
      End
      else
      Begin
        BDUX := 0;
        BDUY := 0;
      End;

      If BeamDeflectLo in Channels then
      Begin
        BDLX := X;
        BDLY := Y;
      End
      else
      Begin
        BDLX := 0;
        BDLY := 0;
      End;

      If ImageDeflectUp in Channels then
      Begin
        IDX := X;
        IDY := Y;
      End
      else
      Begin
        IDX := 0;
        IDY := 0;
      End;

      Channel9 := 0;

      If CameraShutter in Channels then
      Begin //Avec cam shutter
        Shutter := 0.75;
        Inc(T, Round(TSpin)); //Temps d'acquisition
      End
      else
      Begin //sans cam shutter : freerun
        Shutter := 0;
        T := Round(TSpin*(NumPt+1));
      End;

      Time := T; // moment du changement d'état suivant
    End;
    Inc(NumPt);

    If CameraShutter in Channels then
    Begin
      Table[NumPt] := Table[NumPt-1];
      Table[NumPt].Shutter := 0;
      T := Round((TSpin+TTem)*(I+1));
      Table[NumPt].Time := T;

      Inc(NumPt);
    End;
  End;

  //Appelle la fonction
  Res := FuncSetLineScan(Channels, NumPt, Table[0]);
  lbResLineScan.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);

//  Table := Nil;
end;

//------------------------------------------------------------------------------

procedure TEcrTestAriadni.edNomGetStatChange(Sender: TObject);
begin
  btnAppelGetStat.Caption := 'Call '+edNomGetStat.Text;
  lbGetStat.Caption := 'int stdcall '+edNomGetStat.Text+'()';

  btnAppelGetStat.Enabled := (HDll <> 0) and (edNomGetStat.Text <> '');
end;

procedure TEcrTestAriadni.btnAppelGetStatClick(Sender: TObject);
Var
  Res : Integer;
  FuncGetStat : function():Integer; StdCall;
begin
  If HDll = 0 then
  Begin
    lbResGetStat.Caption := 'DLL not loaded';
    Exit;
  End;

  @FuncGetStat := GetProcAddress(HDll, PChar(edNomGetStat.Text));
  If @FuncGetStat = Nil then
  Begin
    lbResGetStat.Caption := 'function '+edNomGetStat.Text+' not found or not loaded';
    Exit;
  End;
  Res := FuncGetStat;
  lbResGetStat.Caption := 'Ok Result = '+ IntToStr(Res)+' = 0x'+IntToHex(Res, 8);
end;

Exports
  MoveBeam      name 'MoveBeam',
  SetGenerator  name 'SetGenerator';


end.
